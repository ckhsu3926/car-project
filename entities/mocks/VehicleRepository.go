// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "car-record/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// VehicleRepository is an autogenerated mock type for the VehicleRepository type
type VehicleRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, userID, name, license, company, model
func (_m *VehicleRepository) Add(ctx context.Context, userID uint, name string, license string, company string, model string) error {
	ret := _m.Called(ctx, userID, name, license, company, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string, string, string) error); ok {
		r0 = rf(ctx, userID, name, license, company, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *VehicleRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: ctx, userID, vehicle
func (_m *VehicleRepository) Edit(ctx context.Context, userID uint, vehicle entities.VehicleDetail) error {
	ret := _m.Called(ctx, userID, vehicle)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, entities.VehicleDetail) error); ok {
		r0 = rf(ctx, userID, vehicle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *VehicleRepository) Get(ctx context.Context, id uint) (entities.VehicleDetail, error) {
	ret := _m.Called(ctx, id)

	var r0 entities.VehicleDetail
	if rf, ok := ret.Get(0).(func(context.Context, uint) entities.VehicleDetail); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.VehicleDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, userID
func (_m *VehicleRepository) GetList(ctx context.Context, userID uint) ([]entities.Vehicle, error) {
	ret := _m.Called(ctx, userID)

	var r0 []entities.Vehicle
	if rf, ok := ret.Get(0).(func(context.Context, uint) []entities.Vehicle); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Vehicle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLicenseExist provides a mock function with given fields: ctx, userID, license
func (_m *VehicleRepository) IsLicenseExist(ctx context.Context, userID uint, license string) bool {
	ret := _m.Called(ctx, userID, license)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) bool); ok {
		r0 = rf(ctx, userID, license)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewVehicleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewVehicleRepository creates a new instance of VehicleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVehicleRepository(t mockConstructorTestingTNewVehicleRepository) *VehicleRepository {
	mock := &VehicleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

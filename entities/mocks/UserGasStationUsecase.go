// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "car-record/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserGasStationUsecase is an autogenerated mock type for the UserGasStationUsecase type
type UserGasStationUsecase struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, userID, name
func (_m *UserGasStationUsecase) Add(ctx context.Context, userID uint, name string) error {
	ret := _m.Called(ctx, userID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, userID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userID, id
func (_m *UserGasStationUsecase) Delete(ctx context.Context, userID uint, id uint) error {
	ret := _m.Called(ctx, userID, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, userID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetList provides a mock function with given fields: ctx, userID
func (_m *UserGasStationUsecase) GetList(ctx context.Context, userID uint) ([]entities.UserGasStation, error) {
	ret := _m.Called(ctx, userID)

	var r0 []entities.UserGasStation
	if rf, ok := ret.Get(0).(func(context.Context, uint) []entities.UserGasStation); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserGasStation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserGasStationUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserGasStationUsecase creates a new instance of UserGasStationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserGasStationUsecase(t mockConstructorTestingTNewUserGasStationUsecase) *UserGasStationUsecase {
	mock := &UserGasStationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "car-record/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, username, password, loginToken
func (_m *UserRepository) Create(ctx context.Context, username string, password string, loginToken string) error {
	ret := _m.Called(ctx, username, password, loginToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, username, password, loginToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, username, password
func (_m *UserRepository) Get(ctx context.Context, username string, password string) (entities.User, error) {
	ret := _m.Called(ctx, username, password)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *UserRepository) GetByToken(ctx context.Context, token string) (entities.User, error) {
	ret := _m.Called(ctx, token)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUsernameExist provides a mock function with given fields: ctx, username
func (_m *UserRepository) IsUsernameExist(ctx context.Context, username string) bool {
	ret := _m.Called(ctx, username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateToken provides a mock function with given fields: ctx, username, loginToken
func (_m *UserRepository) UpdateToken(ctx context.Context, username string, loginToken string) error {
	ret := _m.Called(ctx, username, loginToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, loginToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

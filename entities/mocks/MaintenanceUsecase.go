// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "car-record/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MaintenanceUsecase is an autogenerated mock type for the MaintenanceUsecase type
type MaintenanceUsecase struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: ctx, record
func (_m *MaintenanceUsecase) CreateRecord(ctx context.Context, record entities.MaintenanceRecord) error {
	ret := _m.Called(ctx, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.MaintenanceRecord) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecord provides a mock function with given fields: ctx, recordID
func (_m *MaintenanceUsecase) DeleteRecord(ctx context.Context, recordID uint) error {
	ret := _m.Called(ctx, recordID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, recordID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDetailList provides a mock function with given fields: ctx, recordID
func (_m *MaintenanceUsecase) GetDetailList(ctx context.Context, recordID uint) ([]entities.MaintenanceRecordDetail, error) {
	ret := _m.Called(ctx, recordID)

	var r0 []entities.MaintenanceRecordDetail
	if rf, ok := ret.Get(0).(func(context.Context, uint) []entities.MaintenanceRecordDetail); ok {
		r0 = rf(ctx, recordID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.MaintenanceRecordDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, recordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordList provides a mock function with given fields: ctx, vehicleID
func (_m *MaintenanceUsecase) GetRecordList(ctx context.Context, vehicleID uint) ([]entities.MaintenanceRecord, error) {
	ret := _m.Called(ctx, vehicleID)

	var r0 []entities.MaintenanceRecord
	if rf, ok := ret.Get(0).(func(context.Context, uint) []entities.MaintenanceRecord); ok {
		r0 = rf(ctx, vehicleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.MaintenanceRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, vehicleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDetailList provides a mock function with given fields: ctx, recordID, detailList
func (_m *MaintenanceUsecase) SetDetailList(ctx context.Context, recordID uint, detailList []entities.MaintenanceRecordDetail) error {
	ret := _m.Called(ctx, recordID, detailList)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, []entities.MaintenanceRecordDetail) error); ok {
		r0 = rf(ctx, recordID, detailList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecord provides a mock function with given fields: ctx, record
func (_m *MaintenanceUsecase) UpdateRecord(ctx context.Context, record entities.MaintenanceRecord) error {
	ret := _m.Called(ctx, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.MaintenanceRecord) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMaintenanceUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMaintenanceUsecase creates a new instance of MaintenanceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMaintenanceUsecase(t mockConstructorTestingTNewMaintenanceUsecase) *MaintenanceUsecase {
	mock := &MaintenanceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
